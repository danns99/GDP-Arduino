Include required libraries
Define control and aerodynamic parameters for all system modes
Define delay time

void setup(){
	Set system mode to 'OFF' mode
	Create and configure a new file on the SD card
	Configure pins
	Set baud rate for serial communication
}

void loop(){
	flight_data_update()
	system_mode_check()
	system_mode_display()
	control_loop()
	if arduino_safety_check==FALSE then
		Cut power to safety relay 2
		Set mode to OFF
	if arduino_safety_check==TRUE then
		if mode==OFF then
			SD_card_write()
		else
			actuator_control()
			SD_card_write()
	delay()
}

void system_mode_check(){
	if button is pressed then
		if previous system mode == OFF then
			Change system mode
			Update control and aerodynamic parameters for new system mode
		else
			Change system mode to OFF
			actuator_counter=0
}

void system_mode_display(){
	Light up LED corresponding to the mode in which the system is operating
}
	
	
void flight_data_update(){
	Read voltage from differential pressure sensor
	Read voltage from accelerometer and gyro module
	Convert voltages to required raw data
	Apply filtering to raw data
	return filtered values
}

void control_loop(){
	Run control calculations based on current flight data
	Calculate required new actuator positions
}

void actuator_control(){
	if actuator_counter==1 then
		Set actuator position to zero position
	else
		Update actuator position from control loop
	actuator_counter=actuator_counter+1
}

void arduino_safety_check(){
	Calculate if control loop is bringing the aircraft outside the flight envelope
        if flight envelope is being breached then
		return FALSE
	else
		return TRUE
}
		
void SD_card_write(){
	Print new line containing horizontal velocity, vertical velocity, pitch and pitch rate to SD card
	Flush to SD card
}