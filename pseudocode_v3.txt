INITIALISATION SEQUENCE

Initialise all Arduino modules
Run control loop init function

INTERRUPT SEQUENCE  (~1kHz)

	if STATE = OFF then
		Run flight data update function
	if STATE =! OFF then
		Run flight data update function
		Run safety check function
		if safety check function returns unsafe then
			Set system to OFF state
			Light all LED's to inform pilots that system has been disabled
			Record to SD card that system was disabled
		else
			Light dead mans switch LED to indicate depression of dead mans switches
			Run control function
			Send updated position requirement to actuators

LOOP SEQUENCE (~10Hz)

	Run status check function
	if status = OFF
		Light the 'OFF' LED
	if status = 1
		Light the '1' LED
	if status = 2
		Light the '2' LED
	if status = 3
		Light the '3' LED
	Write current flight and control data to SD card
	delay

FUNCTIONS

Func: Flight Data Update
	Func: Update airspeed:
		 Read MPX5004DP sensor value using analogRead()
		 Calibrate sensor reading, using pre-defined sensor offset value
		 Convert result to voltage reading
		 Using equations from datasheet, convert voltage into differential pressure reading
		 Convert differential pressure reading into airspeed using rearranged Bernoulli equation
	Func: Update pitch and pitch angle:
		 Read x, y and z accelerations from MPU6050 sensor
		 Use trigonometry to calculate pitch angle
		 Read pitch rate from MPU6050 sensor

Func: Status Check
	if position of rotary switch has changed
		Change system mode to new position of rotary switch

Func: Safety Check
		Check g loading not exceeded
		Check flight speed not exceeded
		Check aircraft angle of attack not exceeded
		Check elevator deflection not exceeded
		Check that dead mans switches are still pressed
		if all of the conditions are true
			return TRUE
		else
			return FALSE

Func: Control Loop Init
	timestep size
	timestep counter
	u vector
	old u value
	x vector for target aircraft
	x vector for modified Scout
	array for storing x vector at each timestep for target aircraft
 	array for storing x vector at each timestep for modified Scout
	array for storing unmodified u vector at each timestep for target aircraft
	array for storing modified u vector at each timestep for modified Scout
	u vector for modified Scout
	integral term used in PD controller
	array for storing the state-space matrices for the Scout
	array for storing the state-space matrices for the target aircraft
	Func: Read in aircraft state-space matrices
		read in state-space matrices for the Scout
		read in state-space matrices for the target aircraft

Func: Control Loop
	Func: Store the current values of the x vectors and u vectors
		Write x vectors
		Write u vetors
	Update the timestep counter
	Func: Solve the target aircraft states
		Calculate inverse of (I-A) matrix
		Calculate product of B matrix and u vector
		Update x vector: product of inverse (I-A) matrix and B*u vector
	get the pitch rate output of the target aircraft
	Func: Solve the modified Scout states
		initialise the iteratation counter
		Func: Forward Euler method to guess the new states
		Do:
			Func: Get the input into the modifed Scout using the PD controller
			Func: Limit the control input to the permissable range of elevator inputs
			Solve the inverse of the Jacobian matrix
			Update the modified Scout states
			Increment the iteration counter
		While: max number of iterations has not been reached or the u vector into the modified Scout has not converged
	Output the required elevator command

Func: Stick Force
	Func: Calculate stick torque
		Calculate the total lift coefficient
		Calculate the fuselage datum angle of attack
		Calculate the wing angle of attack
		Calculate the tail effective angle of attack
		Calculate the tail hinge moment coefficient
		Calculate the hinge moment
		Calculate the stick torque
	Get force feedback servo torque
	Func: Calculate required torque command
		Subtract the servo torque from the stick torque
		Correct the error with a PID controller
		Saturate the torque command to +- 100 %
	